{"ast":null,"code":"import _classCallCheck from \"/Users/jofisaes/dev/src/jofisaes/international-airports-service-root/international-airports-gui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jofisaes/dev/src/jofisaes/international-airports-service-root/international-airports-gui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { of } from \"rxjs\";\nimport { catchError, retry } from \"rxjs/internal/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var MetricsService = /*#__PURE__*/(function () {\n  var MetricsService = /*#__PURE__*/function () {\n    function MetricsService(httpClient) {\n      _classCallCheck(this, MetricsService);\n\n      this.httpClient = httpClient;\n      this.headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n    }\n\n    _createClass(MetricsService, [{\n      key: \"getSystemMetrics\",\n      value: function getSystemMetrics(errorCode) {\n        var url = '/iairports/actuator/metrics/http.server.requests';\n\n        if (errorCode && errorCode.value) {\n          url += \"?tag=status:\".concat(errorCode.value);\n        }\n\n        return this.httpClient.get(url, {\n          headers: this.headers\n        }).pipe(retry(3), catchError(this.handleError()));\n      }\n    }, {\n      key: \"getHttpTraces\",\n      value: function getHttpTraces() {\n        return this.httpClient.get(\"/iairports/actuator/httptrace\", {\n          headers: this.headers\n        }).pipe(retry(3), catchError(this.handleError()));\n      }\n    }, {\n      key: \"handleError\",\n      value: function handleError() {\n        var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'operation';\n        var result = arguments.length > 1 ? arguments[1] : undefined;\n        return function (error) {\n          console.error(error);\n          console.log(\"\".concat(operation, \" failed: \").concat(error.message));\n          return of(result);\n        };\n      }\n    }]);\n\n    return MetricsService;\n  }();\n\n  MetricsService.ɵfac = function MetricsService_Factory(t) {\n    return new (t || MetricsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MetricsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MetricsService,\n    factory: MetricsService.ɵfac,\n    providedIn: 'root'\n  });\n  return MetricsService;\n})();","map":null,"metadata":{},"sourceType":"module"}